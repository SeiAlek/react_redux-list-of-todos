{"version":3,"sources":["helpers/config.ts","helpers/api.tsx","store/index.ts","components/Button/Button.tsx","components/TodoList/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["SortFields","API_URL","API_URL_TODOS","API_URL_USERS","getData","url","a","fetch","response","json","getTodos","Promise","all","todos","users","preparedTodos","map","todo","user","find","id","userId","username","HEADERS","name","field","Id","Name","Title","Completed","finishLoading","message","type","setTodos","setError","error","setSortReverse","isReverse","isLoading","state","loading","isLoaded","loaded","getError","getSortType","sortField","initialState","store","createStore","action","filter","todoId","composeWithDevTools","Button","text","className","handleClick","onClick","TodoItem","dispatch","useDispatch","cn","completed","title","TodoList","useSelector","reverse","getSortField","b","sortDirection","localeCompare","Number","sortedTodos","useMemo","sort","header","key","setSortField","App","loadTodos","max","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd857871.chunk.js","sourcesContent":["export enum SortFields {\n  Id = 'id',\n  Name = 'username',\n  Title = 'title',\n  Completed = 'completed',\n}\n\nexport const HEADERS: SortButton[] = [\n  {\n    name: 'Id',\n    field: SortFields.Id,\n  },\n  {\n    name: 'Name',\n    field: SortFields.Name,\n  },\n  {\n    name: 'Title',\n    field: SortFields.Title,\n  },\n  {\n    name: 'Completed',\n    field: SortFields.Completed,\n  },\n];\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\nconst API_URL_TODOS = `${API_URL}/todos.json`;\nconst API_URL_USERS = `${API_URL}/users.json`;\n\nexport async function getData<T>(url: string): Promise<T[]> {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n}\n\nexport async function getTodos() {\n  const [todos, users] = await Promise.all([\n    getData<Todo>(API_URL_TODOS),\n    getData<User>(API_URL_USERS),\n  ]);\n\n  const preparedTodos = todos.map((todo) => {\n    return {\n      ...todo,\n      user: users.find((user) => user.id === todo.userId) || {\n        id: null,\n        username: 'Unknown',\n      },\n    };\n  });\n\n  return preparedTodos;\n}\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { SortFields } from '../helpers';\n\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_LOADED = 'IS_LOADED';\nconst SET_TODOS = 'SET_TODOS';\nconst SET_ERROR = 'SET_ERROR';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SET_SORT_FIELD = 'SET_SORT_FIELD';\nconst SORT_REVERSE = 'SORT_REVERSE';\n\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({\n  type: FINISH_LOADING,\n  message,\n});\nexport const setLoaded = () => ({ type: SET_LOADED });\nexport const setTodos = (todos: Todo[] = []) => ({\n  type: SET_TODOS,\n  todos,\n});\nexport const setError = (error = '') => ({\n  type: SET_ERROR,\n  error,\n});\nexport const deleteTodo = (todoId: number) => ({\n  type: DELETE_TODO,\n  todoId,\n});\nexport const setSortField = (sortField: SortFields) => ({\n  type: SET_SORT_FIELD,\n  sortField,\n});\nexport const setSortReverse = (isReverse: boolean) => ({\n  type: SORT_REVERSE,\n  isReverse,\n});\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const isLoaded = (state: RootState) => state.loaded;\nexport const getMessage = (state: RootState) => state.message;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getError = (state: RootState) => state.error;\nexport const getSortType = (state: RootState) => state.sortField;\nexport const isReverse = (state: RootState) => state.isReverse;\n\nexport type RootState = {\n  loading: boolean;\n  loaded: boolean;\n  message: string;\n  error: string;\n  sortField: SortFields;\n  isReverse: boolean;\n  todos: Todo[];\n};\n\nconst initialState: RootState = {\n  loading: false,\n  loaded: false,\n  message: '',\n  error: '',\n  sortField: SortFields.Id,\n  isReverse: false,\n  todos: [],\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n\n    case SET_LOADED:\n      return {\n        ...state,\n        loaded: true,\n      };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    case SET_ERROR:\n      return {\n        ...state,\n        error: action.error,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.todoId),\n      };\n\n    case SET_SORT_FIELD:\n      return {\n        ...state,\n        sortField: action.sortField,\n      };\n\n    case SORT_REVERSE:\n      return {\n        ...state,\n        isReverse: action.isReverse,\n      };\n\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\n\ninterface Props {\n  text: string;\n  className: string;\n  handleClick: () => void;\n}\n\nexport const Button: React.FC<Props> = ({\n  text,\n  className,\n  handleClick,\n}) => (\n  <button type=\"button\" className={className} onClick={handleClick}>\n    {text}\n  </button>\n);\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { useDispatch } from 'react-redux';\n\nimport {\n  deleteTodo,\n} from '../../store';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <tr className={cn({ 'is-selected': todo.completed })}>\n      <td>\n        {todo.id}\n      </td>\n      <td>\n        {todo.user.username}\n      </td>\n      <td>\n        {todo.title}\n      </td>\n      <td>\n        {todo.completed && 'Completed'}\n      </td>\n      <td>\n        <button\n          type=\"button\"\n          className=\"button is-small is-danger is-light is-rounded\"\n          onClick={() => dispatch(deleteTodo(todo.id))}\n        >\n          <span>Delete</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { TodoItem } from './TodoItem';\nimport { Button } from '../Button';\nimport { HEADERS, SortFields } from '../../helpers';\n\nimport {\n  getTodos,\n  setSortField,\n  getSortType,\n  setSortReverse,\n  isReverse,\n} from '../../store';\n\nexport const TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const sortField = useSelector(getSortType);\n  const reverse = useSelector(isReverse);\n\n  const handleSort = (field: SortFields) => {\n    if (field === sortField) {\n      dispatch(setSortReverse(true));\n    } else {\n      dispatch(setSortField(field));\n      dispatch(setSortReverse(false));\n    }\n  };\n\n  const getSortField = (a: Todo, b: Todo) => {\n    const sortDirection = (reverse) ? -1 : 1;\n\n    switch (sortField) {\n      case SortFields.Id:\n        return (a.id - b.id) * sortDirection;\n\n      case SortFields.Name:\n        return (a.user.username).localeCompare(b.user.username) * sortDirection;\n\n      case SortFields.Title:\n        return (a.title).localeCompare(b.title) * sortDirection;\n\n      case SortFields.Completed:\n        return (Number(a.completed) - Number(b.completed)) * -sortDirection;\n\n      default:\n        return 0;\n    }\n  };\n\n  const sortedTodos = useMemo(() => [...todos].sort(getSortField), [todos, sortField, reverse]);\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          {HEADERS.map((header) => (\n            <th key={header.name} className=\"bd-callout is-primary table__header\">\n              <Button\n                text={header.name}\n                className=\"button is-primary is-inverted is-outlined is-medium is-fullwidth\"\n                handleClick={() => handleSort(header.field)}\n              />\n            </th>\n          ))}\n          <th className=\"bd-callout is-primary table__header\">\n            <div className=\"table__header-content\">Delete</div>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {sortedTodos.map((todo) => (\n          <TodoItem todo={todo} key={todo.id} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { getTodos } from './helpers';\nimport { Button } from './components/Button';\n\nimport {\n  startLoading,\n  finishLoading,\n  isLoading,\n  setTodos,\n  getError,\n  setError,\n  setLoaded,\n  isLoaded,\n} from './store';\nimport { TodoList } from './components/TodoList';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const loaded = useSelector(isLoaded);\n  const error = useSelector(getError);\n\n\n  const loadTodos = async () => {\n    dispatch(startLoading());\n    try {\n      const todos = await getTodos();\n\n      dispatch(setTodos(todos));\n      dispatch(setLoaded());\n    } catch (err) {\n      dispatch(setError(`Oops... Something went wrong: ${err}`));\n    }\n\n    dispatch(finishLoading());\n  };\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title is-1\">Redux list of todos</h1>\n        {loading && <progress className=\"progress is-primary\" max=\"100\" />}\n        {!loading && !loaded && (\n          <Button\n            text=\"Load ToDos\"\n            className=\"button\"\n            handleClick={loadTodos}\n          />\n        )}\n        {loaded && <TodoList />}\n        <h2>{error}</h2>\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}